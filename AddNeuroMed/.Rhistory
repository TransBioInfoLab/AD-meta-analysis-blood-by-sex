knitr::opts_chunk$set(echo = TRUE,warning = FALSE)
library(dplyr)
library(SummarizedExperiment)
cohort <- "AddNeuroMed"
dir.base <- "~/Dropbox (BBSR)/AD-meta-analysis-blood-samples/"
dir.data <- file.path(dir.base,"datasets/",cohort,"/")
dir.data.aux <- file.path(dir.base,"datasets/Aux/")
dir.data.raw <- file.path(dir.data,"/step1_download/")
dir.data.processed <- file.path(dir.data,"/step2_processed/")
dir.data.pca <- file.path(dir.data,"/step3_pca_filtering/")
dir.results <- file.path(dir.base,"analysis_results")
for(p in grep("dir",ls(),value = T)) dir.create(get(p),recursive = TRUE,showWarnings = FALSE)
library(GEOquery)
# https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE144858
query <- getGEO("GSE144858",GSEMatrix = TRUE,destdir = dir.data.raw)
load(file.path(dir.data.raw,"addNeuroMed_se_non_normalized.rda"))
knitr::opts_chunk$set(echo = TRUE,warning = FALSE)
library(dplyr)
library(SummarizedExperiment)
cohort <- "AddNeuroMed"
dir.base <- "~/Dropbox (BBSR)/AD-meta-analysis-blood-samples/"
dir.data <- file.path(dir.base,"datasets/",cohort,"/")
dir.data.aux <- file.path(dir.base,"datasets/Aux/")
dir.data.raw <- file.path(dir.data,"/step1_download/")
dir.data.processed <- file.path(dir.data,"/step2_processed/")
dir.data.pca <- file.path(dir.data,"/step3_pca_filtering/")
dir.results <- file.path(dir.base,"analysis_results")
for(p in grep("dir",ls(),value = T)) dir.create(get(p),recursive = TRUE,showWarnings = FALSE)
load(file.path(dir.data.raw,"addNeuroMed_se_non_normalized.rda"))
knitr::opts_chunk$set(echo = TRUE,warning = FALSE)
library(sva)
install.packages("mgcv")
install.packages("mgcv")
BiocManager::install("sva")
knitr::opts_chunk$set(echo = TRUE,warning = FALSE)
library(sva)
library(dplyr)
library(SummarizedExperiment)
library(ExperimentHub)
cohort <- "AddNeuroMed"
dir.base <- "~/Dropbox (BBSR)/AD-meta-analysis-blood-samples/"
dir.data <- file.path(dir.base,"datasets/",cohort,"/")
dir.data.aux <- file.path(dir.base,"datasets/Aux/")
dir.data.raw <- file.path(dir.data,"/step1_download/")
dir.data.processed <- file.path(dir.data,"/step2_processed/")
dir.data.pca <- file.path(dir.data,"/step3_pca_filtering/")
dir.results <- file.path(dir.base,"analysis_results",cohort)
addNeuroMed.se <- readRDS(file.path(dir.data.pca, "addNeuroMed_QNBMIQ_PCfiltered.RDS"))
mvalues <- log2(assay(addNeuroMed.se)/(1 - assay(addNeuroMed.se)))
#  0 = control, 1 = AD, 2 = MCI
pheno <- data.frame(colData (addNeuroMed.se))
pheno$DIAGNOSIS <- factor(pheno$disease.state.ch1, levels = c("control", "mild cognitive impairment", "Alzheimer's disease"))
pheno$DIAGNOSIS_merged <- ifelse(pheno$DIAGNOSIS == "control", 0, 1)
pheno$DIAGNOSIS_merged <- factor(pheno$DIAGNOSIS_merged, levels = c(0, 1))
pheno$barcodes <- row.names(pheno)
pheno$Sex <- factor(pheno$Sex.ch1)
pheno <- pheno %>% dplyr::select(
c(barcodes, Sex, age.ch1,
DIAGNOSIS, DIAGNOSIS_merged,
B, NK,   CD4T, CD8T,   Mono, Neutro, Eosino
)
)
mvalues <- mvalues[, pheno$barcodes]
pheno.cn.mci <- pheno[pheno$DIAGNOSIS %in% c("control", "mild cognitive impairment"),]
pheno.cn.mci$DIAGNOSIS <-  forcats::fct_drop(pheno.cn.mci$DIAGNOSIS)
mvalues.cn.mci <- mvalues[, pheno.cn.mci$barcodes]
pheno.cn.ad <- pheno[pheno$DIAGNOSIS %in% c("control", "Alzheimer's disease"),]
pheno.cn.ad$DIAGNOSIS <-  forcats::fct_drop(pheno.cn.ad$DIAGNOSIS)
mvalues.cn.ad <- mvalues[, pheno.cn.ad$barcodes]
rm(mvalues)
gc()
identical(colnames(mvalues.cn.mci), pheno.cn.mci$barcodes)
identical(colnames(mvalues.cn.ad), pheno.cn.ad$barcodes)
library(sva)
?model.matrix
edata = mvalues.cn.ad
pheno = pheno.cn.ad
?num.sv
# levels with empty no items will give an error
pheno$DIAGNOSIS <-  forcats::fct_drop(pheno$DIAGNOSIS)
# Full model
mod <- model.matrix (
~ DIAGNOSIS + age.ch1 + Sex + B + NK + CD4T + CD8T + Mono + Neutro,
data = pheno
)
# Null model
mod0 <- model.matrix (
~ age.ch1 + Sex + B + NK + CD4T + CD8T + Mono + Neutro,
data = pheno
)
View(mod)
n.sv <- num.sv (as.matrix(edata), mod, vfilter = NULL, method = "leek")
knitr::opts_chunk$set(echo = TRUE,warning = FALSE)
library(dplyr)
library(SummarizedExperiment)
library(ExperimentHub)
cohort <- "AddNeuroMed"
dir.base <- "~/Dropbox (BBSR)/AD-meta-analysis-blood-samples/"
dir.data <- file.path(dir.base,"datasets/",cohort,"/")
dir.data.aux <- file.path(dir.base,"datasets/Aux/")
dir.data.raw <- file.path(dir.data,"/step1_download/")
dir.data.processed <- file.path(dir.data,"/step2_processed/")
dir.data.pca <- file.path(dir.data,"/step3_pca_filtering/")
dir.results <- file.path(dir.base,"analysis_results",cohort)
install.packages(c("gt", "RVenn"))
install.packages(c("gt", "RVenn"))
addNeuroMed.se <- readRDS(file.path(dir.data.pca, "addNeuroMed_QNBMIQ_PCfiltered.RDS"))
addNeuroMed.se <- readRDS(file.path(dir.data.pca, "addNeuroMed_QNBMIQ_PCfiltered.RDS"))
addNeuroMed.se <- readRDS("C:/Users/lxz323/Dropbox (BBSR)/AD-meta-analysis-blood-samples/datasets/AddNeuroMed/step3_pca_filtering/addNeuroMed_QNBMIQ_PCfiltered.RDS")
mvalues <- log2(assay(addNeuroMed.se)/(1 - assay(addNeuroMed.se)))
#  0 = control, 1 = AD, 2 = MCI
pheno <- data.frame(colData (addNeuroMed.se))
pheno$DIAGNOSIS <- factor(pheno$disease.state.ch1, levels = c("control", "mild cognitive impairment", "Alzheimer's disease"))
pheno$DIAGNOSIS_merged <- ifelse(pheno$DIAGNOSIS == "control", 0, 1)
pheno$DIAGNOSIS_merged <- factor(pheno$DIAGNOSIS_merged, levels = c(0, 1))
pheno$barcodes <- row.names(pheno)
pheno$Sex <- factor(pheno$Sex.ch1)
pheno <- pheno %>% dplyr::select(
c(barcodes, Sex, age.ch1,
DIAGNOSIS, DIAGNOSIS_merged,
B, NK,   CD4T, CD8T,   Mono, Neutro, Eosino
)
)
mvalues <- mvalues[, pheno$barcodes]
pheno.cn.mci <- pheno[pheno$DIAGNOSIS %in% c("control", "mild cognitive impairment"),]
pheno.cn.mci$DIAGNOSIS <-  forcats::fct_drop(pheno.cn.mci$DIAGNOSIS)
mvalues.cn.mci <- mvalues[, pheno.cn.mci$barcodes]
pheno.cn.ad <- pheno[pheno$DIAGNOSIS %in% c("control", "Alzheimer's disease"),]
pheno.cn.ad$DIAGNOSIS <-  forcats::fct_drop(pheno.cn.ad$DIAGNOSIS)
mvalues.cn.ad <- mvalues[, pheno.cn.ad$barcodes]
rm(mvalues)
gc()
dim()mvalues.cn.mci
dim(mvalues.cn.mci)
library(sva)
getEstimatedSurrogateVars <- function(edata, pheno){
# levels with empty no items will give an error
pheno$DIAGNOSIS <-  forcats::fct_drop(pheno$DIAGNOSIS)
# Full model
mod <- model.matrix (
~ DIAGNOSIS + age.ch1 + Sex + B + NK + CD4T + CD8T + Mono + Neutro,
data = pheno
)
# Null model
mod0 <- model.matrix (
~ age.ch1 + Sex + B + NK + CD4T + CD8T + Mono + Neutro,
data = pheno
)
n.sv <- num.sv (as.matrix(edata), mod, vfilter = NULL, method = "leek")
if(n.sv > 0){
svobj <- sva (as.matrix(edata), mod, mod0, n.sv = n.sv)
df <- svobj$sv %>% as.data.frame()
colnames(df) <- paste0("S",colnames(df))
pheno <- cbind(pheno,df)
} else {
print("num.sv:", n.sv)
}
return(pheno)
}
pheno.cn.mci.with.svobj <- getEstimatedSurrogateVars(edata = mvalues.cn.mci, pheno = pheno.cn.mci)
View(pheno.cn.mci.with.svobj)
# If we found Surrogate Variables we will check if it is related to the diagnosis
idx <- grep("SV",colnames(pheno.cn.mci.with.svobj),value = TRUE)
if(length(idx) > 0){
df <- plyr::adply(.data = idx,.margins = 1,.fun = function(col){
data.frame("pvalue" =
wilcox.test(
pheno.cn.mci.with.svobj[[col]][pheno.cn.mci.with.svobj$DIAGNOSIS_merged==1],
pheno.cn.mci.with.svobj[[col]][pheno.cn.mci.with.svobj$DIAGNOSIS_merged==0]
)$p.value)
},.id = "column")
df$column <- idx
df$sig <- df$pvalue < 0.05
df %>% dplyr::filter(sig == TRUE)
}
